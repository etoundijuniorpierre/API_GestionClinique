package com.example.GestionClinique.dto;

import com.example.GestionClinique.model.entity.HistoriqueAction;
import com.example.GestionClinique.model.entity.Utilisateur; // Import Utilisateur for toEntity conversion
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor; // Add this
import lombok.AllArgsConstructor; // Add this

import java.time.LocalDate;

@Data
@Builder
@NoArgsConstructor // Added
@AllArgsConstructor // Added
public class HistoriqueActionDto {
    private Integer id;
    private LocalDate date;
    private String action;
    private UtilisateurSummaryDto utilisateur; // *** USE UtilisateurLightDto HERE ***

    public static HistoriqueActionDto fromEntity(HistoriqueAction historiqueAction){
        if(historiqueAction == null) return null;

        return HistoriqueActionDto.builder()
                .id(historiqueAction.getId())
                .date(historiqueAction.getDate())
                .action(historiqueAction.getAction())
                .utilisateur(UtilisateurSummaryDto.fromEntity(historiqueAction.getUtilisateur())) // *** Call UtilisateurLightDto.fromEntity ***
                .build();
    }

    public static HistoriqueAction toEntity(HistoriqueActionDto historiqueActionDto){
        if(historiqueActionDto == null) return null;

        HistoriqueAction historiqueAction = new HistoriqueAction();
        // The ID should only be set if you are updating an existing entity.
        // For new entities, the ID is typically generated by the database.
        // If this DTO is used for updates, you might set it:
        // if (historiqueActionDto.getId() != null) {
        //     historiqueAction.setId(historiqueActionDto.getId());
        // }
        historiqueAction.setDate(historiqueActionDto.getDate());
        historiqueAction.setAction(historiqueActionDto.getAction());

        // *** IMPORTANT for toEntity: You cannot directly convert UtilisateurLightDto to a full Utilisateur entity here. ***
        // You should only set the ID of the related entity. The actual entity should be fetched by your service layer.
        if (historiqueActionDto.getUtilisateur() != null && historiqueActionDto.getUtilisateur().getId() != null) {
            // Create a proxy/stub entity with just the ID.
            // A more robust approach would be to fetch the actual Utilisateur entity from the repository
            // in your service layer before saving the HistoriqueAction.
            Utilisateur associatedUser = new Utilisateur();
            associatedUser.setId(historiqueActionDto.getUtilisateur().getId());
            historiqueAction.setUtilisateur(associatedUser);
            // If InfoPersonnel is mandatory for the Utilisateur entity, you might need to set a minimal one:
            // if (historiqueActionDto.getUtilisateur().getInfoPersonnel() != null) {
            //     associatedUser.setInfoPersonnel(InfoPersonnelDto.toEntity(historiqueActionDto.getUtilisateur().getInfoPersonnel()));
            // }
        }

        return historiqueAction;
    }
}