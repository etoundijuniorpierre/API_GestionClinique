package com.example.GestionClinique.mapper; // Consistent package name

import com.example.GestionClinique.dto.RequestDto.HistoriqueActionRequestDto;
import com.example.GestionClinique.dto.ResponseDto.HistoriqueActionResponseDto;


import com.example.GestionClinique.model.entity.HistoriqueAction;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.NullValuePropertyMappingStrategy;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;

@Mapper(componentModel = "spring",
        nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE,
        uses = {UtilisateurMapper.class}) // Declare UtilisateurMapper for nested mapping
public abstract class HistoriqueActionMapper {

    @Autowired
    protected UtilisateurMapper utilisateurMapper;

    // Convert Request DTO to Entity for creation
//    @Mapping(target = "id", ignore = true) // ID is generated by DB
//    @Mapping(target = "utilisateur", ignore = true) // Set by service based on utilisateurId
//    @Mapping(target = "creationDate", ignore = true) // Handled by BaseEntity or service
//    @Mapping(target = "lastModifiedDate", ignore = true) // Handled by BaseEntity or service
    public abstract HistoriqueAction toEntity(HistoriqueActionRequestDto dto);

    // Convert Entity to Response DTO
    @Mapping(target = "utilisateur", expression = "java(utilisateurMapper.toDto(entity.getUtilisateur()))")
    public abstract HistoriqueActionResponseDto toDto(HistoriqueAction entity);

    public abstract List<HistoriqueActionResponseDto> toDtoList(List<HistoriqueAction> entities);

    // Update existing entity from DTO (if needed, though actions are usually immutable)
    // For logging, actions are typically not updated, but for completeness or other use cases, you can have this.
    // If you only log actions and don't update them, this method and corresponding controller/service logic can be removed.
//    @Mapping(target = "id", ignore = true)
//    @Mapping(target = "utilisateur", ignore = true)
//    @Mapping(target = "creationDate", ignore = true)
//    @Mapping(target = "lastModifiedDate", ignore = true)
    public abstract void updateEntityFromDto(HistoriqueActionRequestDto dto, @MappingTarget HistoriqueAction entity);
}